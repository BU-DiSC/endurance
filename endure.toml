[project]
name = "ENDURE"
log_level = "INFO"
experiments = [
    #'Exp01',
    'CostSurfaceEp']

# =============================================================================
# HEADER IO
#   Generic IO settings for experiments, saving data, etc
# =============================================================================
[io]
data_dir = "/Users/ndhuynh/sandbox/data"
cold_data_dir = "/Users/ndhuynh/sandbox/data"

# =============================================================================
# HEADER train
#   Configuration parameters for training a model including which model
# =============================================================================
[train]
model = "KCostModelAlpha"
train_dir = "train_data"
test_dir = "test_data"

[train.params]
max_levels = 16
max_size_ratio = 50
# h, z0, z1, q, w
mean_bias = [4.75, 0.5, 0.5, 0.5, 0.5]
std_bias =  [2.74,  0.3, 0.3, 0.3, 0.3]
out_dims = 4

# Number of continuous variables the NN will take in
num_cont_vars = 5
# Number of categorical variables we will need to encode
num_cate_vars = 17

hidden_layers = 2
embedding_input = 17
embedding_output = 17

max_epochs = 128
batch_size = 1024
learning_rate = 0.001
# If training is via SGD, this will be the gamma decay parameter for learning
learning_rate_decay = 0.9
early_stop_num = 2
shuffle = true

[train.validate]
batch_size = 16384
percent = 0.1
shuffle = false

# =============================================================================
# HEADER SYSTEM
#   System settings encapsulate physical components of the machine you're
#   expecting to run your LSM tree on, and additionally starting budgets and
#   number of element.
# =============================================================================
[system]
# Number of physical entries per page
B = 4

# Read/Write asymmetry coefficient, 1 implies writes and reads throughput is
# roughly the same the current storage device
phi = 1

# Range query selectivity, 0 implies the key range per range query would roughly
# fit into 1 page. Selectivity 1 implies range queries will always query the
# full key possible range
s = 0.00

# Size of a single entry in bytes
E = 1024

# Memory budget in terms of bits per element, this combined with number of
# elements (N) will get you roughly the expected total memory we are allocating
# between bloom filter memory and buffer memory
H = 10

# Total number of elements our LSM tree will start off with
N = 100000000

# =============================================================================
# HEADER WORKLOADS
#     List of representative workloads
# =============================================================================
[[workloads]]
id = 0
z0 = 0.25
z1 = 0.25
q  = 0.25
w  = 0.25

[[workloads]]
id = 1
z0 = 0.97
z1 = 0.01
q = 0.01
w = 0.01

[[workloads]]
id = 2
z0 = 0.01
z1 = 0.97
q = 0.01
w = 0.01

[[workloads]]
id = 3
z0 = 0.01
z1 = 0.01
q = 0.97
w = 0.01

[[workloads]]
id = 4
z0 = 0.01
z1 = 0.01
q = 0.01
w = 0.97

[[workloads]]
id = 5
z0 = 0.49
z1 = 0.49
q = 0.01
w = 0.01

[[workloads]]
id = 6
z0 = 0.49
z1 = 0.01
q = 0.49
w = 0.01

[[workloads]]
id = 7
z0 = 0.49
z1 = 0.01
q = 0.01
w = 0.49

[[workloads]]
id = 8
z0 = 0.01
z1 = 0.49
q = 0.49
w = 0.01

[[workloads]]
id = 9
z0 = 0.01
z1 = 0.49
q = 0.01
w = 0.49

[[workloads]]
 id = 10
 z0 = 0.01
 z1 = 0.01
 q = 0.49
 w = 0.49

 [[workloads]]
 id = 11
 z0 = 0.33
 z1 = 0.33
 q = 0.33
 w = 0.01

 [[workloads]]
 id = 12
 z0 = 0.33
 z1 = 0.33
 q = 0.01
 w = 0.33

 [[workloads]]
 id = 13
 z0 = 0.33
 z1 = 0.01
 q = 0.33
 w = 0.33

 [[workloads]]
 id = 14
 z0 = 0.01
 z1 = 0.33
 q = 0.33
 w = 0.33
